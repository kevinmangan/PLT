OBJS = ast.cmo parser.cmo scanner.cmo analyzer.cmo javaconvert.cmo javacode.cmo pc.cmo

TESTS = \
arith1 \
arith2 \
fib \
for1 \
func1 \
func2 \
func3 \
gcd \
hello \
if1 \
if2 \
if3 \
if4 \
ops1 \
var1 \
while1

TARFILES = Makefile testall.sh scanner.mll parser.mly \
	ast.ml st.mli jt.mli analyzer.ml javaconvert.ml javacode.ml pc.ml \
	$(TESTS:%=tests/test-%.pc) \
	$(TESTS:%=tests/test-%.out)

pc : $(OBJS)
	ocamlc -o pc $(OBJS)

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

pubCrawl.tar.gz : $(TARFILES)
	cd .. && tar czf src/pubCrawl.tar.gz $(TARFILES:%=pubCrawl/%)

.PHONY : test
test : pc testall.sh
	./testall.sh

.PHONY : clean
clean :
	rm -f pc parser.ml parser.mli parser.output scanner.ml testall.log \
	*.cmo *.cmi *.out *.diff

.PHONY : all
all: clean pc

# Generated by ocamldep *.ml *.mli
pc.cmo: scanner.cmo parser.cmi ast.cmo
pc.cmx: scanner.cmx parser.cmx ast.cmx
parser.cmo: ast.cmo parser.cmi
parser.cmx: ast.cmx parser.cmi
scanner.cmo: parser.cmi
scanner.cmx: parser.cmx
parser.cmi: ast.cmo
