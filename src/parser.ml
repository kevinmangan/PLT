type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | COLON
  | ARROW
  | CONCAT
  | ACCESS
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | NOT
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | ID of (string)
  | NUM_LIT of (float)
  | BOOLEAN_LIT of (bool)
  | STRING_LIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast

  (* convert string into char list *)
  let explode s =
    let rec exp i l = 
      if i < 0 then l else exp (i - 1) (s.[i] :: l)
    in 
      exp (String.length s - 1) []
# 53 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACK *);
  262 (* RBRACK *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* ASSIGN *);
  266 (* COLON *);
  267 (* ARROW *);
  268 (* CONCAT *);
  269 (* ACCESS *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* TIMES *);
  273 (* DIVIDE *);
  274 (* MOD *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELIF *);
  287 (* ELSE *);
  288 (* FOR *);
  289 (* WHILE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* ID *);
  291 (* NUM_LIT *);
  292 (* BOOLEAN_LIT *);
  293 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\007\000\007\000\005\000\005\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\011\000\011\000\013\000\013\000\013\000\
\013\000\016\000\017\000\017\000\006\000\018\000\018\000\019\000\
\019\000\015\000\015\000\020\000\020\000\014\000\014\000\012\000\
\012\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\003\000\002\000\002\000\009\000\005\000\
\007\000\003\000\000\000\001\000\003\000\003\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\000\000\006\000\000\000\002\000\004\000\003\000\005\000\
\005\000\003\000\001\000\003\000\004\000\000\000\001\000\001\000\
\003\000\002\000\003\000\003\000\005\000\003\000\006\000\004\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\018\000\019\000\
\003\000\000\000\000\000\000\000\000\000\021\000\024\000\025\000\
\000\000\000\000\022\000\000\000\023\000\000\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\062\000\000\000\010\000\000\000\012\000\000\000\000\000\000\000\
\002\000\047\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\064\000\048\000\049\000\000\000\000\000\000\000\
\000\000\008\000\004\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\009\000\000\000\000\000\045\000\000\000\
\000\000\007\000\000\000\043\000"

let yydgoto = "\002\000\
\003\000\004\000\017\000\082\000\018\000\027\000\078\000\084\000\
\020\000\127\000\132\000\029\000\022\000\023\000\024\000\030\000\
\031\000\037\000\038\000\034\000"

let yysindex = "\033\000\
\000\000\000\000\000\000\118\255\155\255\003\255\160\255\160\255\
\160\255\060\255\072\255\073\255\055\255\000\000\000\000\000\000\
\000\000\068\255\099\255\231\000\098\255\000\000\000\000\000\000\
\104\255\106\255\000\000\075\000\000\000\126\255\112\255\000\000\
\127\255\079\255\106\255\231\000\132\255\140\255\066\255\101\000\
\160\255\166\255\160\255\160\255\146\255\000\000\000\000\160\255\
\160\255\160\255\125\255\160\255\160\255\160\255\160\255\160\255\
\160\255\160\255\160\255\160\255\160\255\160\255\160\255\160\255\
\160\255\146\255\151\255\153\255\134\255\160\255\000\000\136\255\
\000\000\160\255\000\000\127\000\000\000\159\255\153\000\231\000\
\000\000\000\000\170\255\163\255\179\000\076\255\000\000\076\255\
\076\255\066\255\066\255\066\255\137\002\137\002\161\002\161\002\
\161\002\161\002\113\002\229\001\231\000\000\000\146\255\146\255\
\000\000\231\000\164\255\231\000\146\255\160\255\146\255\107\255\
\000\000\160\255\000\000\000\000\000\000\160\255\148\255\169\255\
\231\000\000\000\000\000\178\255\231\000\184\255\157\255\166\255\
\000\000\160\255\146\255\000\000\204\255\205\000\000\000\146\255\
\146\255\000\000\148\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\186\000\000\000\000\000\206\255\000\000\
\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\
\000\000\000\000\027\001\000\000\053\001\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\255\070\255\000\000\018\255\078\001\000\000\
\000\000\207\255\000\000\000\000\000\000\000\000\000\000\230\255\
\228\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\229\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\255\
\000\000\000\000\000\000\000\000\246\255\007\255\000\000\178\001\
\203\001\103\001\128\001\153\001\072\002\097\002\078\255\253\001\
\022\002\047\002\173\255\016\000\033\255\000\000\000\000\000\000\
\008\255\122\255\000\000\116\255\000\000\233\255\000\000\000\000\
\000\000\253\255\000\000\000\000\000\000\000\000\001\000\000\000\
\035\255\000\000\000\000\000\000\123\255\000\000\012\000\255\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000"

let yygindex = "\000\000\
\000\000\182\000\000\000\215\255\219\255\002\000\136\000\019\000\
\251\255\126\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\218\000\000\000\000\000"

let yytablesize = 947
let yytable = "\028\000\
\042\000\036\000\039\000\040\000\077\000\019\000\032\000\021\000\
\027\000\050\000\027\000\044\000\027\000\027\000\027\000\052\000\
\027\000\013\000\027\000\055\000\027\000\027\000\013\000\055\000\
\102\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\001\000\014\000\076\000\033\000\079\000\080\000\014\000\
\016\000\016\000\036\000\085\000\086\000\021\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\041\000\116\000\117\000\044\000\
\106\000\045\000\048\000\119\000\108\000\122\000\049\000\056\000\
\042\000\043\000\046\000\056\000\048\000\056\000\051\000\035\000\
\049\000\035\000\071\000\035\000\035\000\035\000\072\000\035\000\
\051\000\135\000\077\000\054\000\055\000\056\000\138\000\139\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\121\000\047\000\065\000\005\000\121\000\006\000\123\000\007\000\
\125\000\019\000\066\000\021\000\045\000\057\000\005\000\069\000\
\006\000\057\000\007\000\057\000\134\000\060\000\061\000\068\000\
\120\000\060\000\061\000\021\000\124\000\008\000\009\000\010\000\
\070\000\073\000\011\000\012\000\013\000\014\000\015\000\016\000\
\008\000\009\000\010\000\074\000\081\000\011\000\012\000\013\000\
\014\000\015\000\016\000\005\000\025\000\006\000\087\000\007\000\
\005\000\103\000\006\000\104\000\007\000\110\000\005\000\105\000\
\006\000\107\000\007\000\113\000\114\000\118\000\039\000\128\000\
\039\000\126\000\039\000\039\000\039\000\008\000\039\000\129\000\
\130\000\001\000\008\000\131\000\026\000\014\000\015\000\016\000\
\008\000\035\000\014\000\015\000\016\000\039\000\039\000\013\000\
\014\000\015\000\016\000\020\000\020\000\136\000\020\000\020\000\
\020\000\020\000\020\000\054\000\020\000\011\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\026\000\026\000\054\000\
\026\000\026\000\026\000\026\000\026\000\015\000\026\000\015\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\016\000\
\011\000\042\000\015\000\042\000\042\000\042\000\112\000\133\000\
\140\000\083\000\000\000\000\000\044\000\000\000\044\000\044\000\
\044\000\040\000\000\000\040\000\000\000\040\000\040\000\040\000\
\000\000\040\000\000\000\042\000\042\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\044\000\044\000\
\044\000\040\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\020\000\020\000\000\000\000\000\020\000\000\000\000\000\
\051\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\048\000\067\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\048\000\000\000\000\000\
\000\000\049\000\000\000\075\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\048\000\
\109\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\048\000\111\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\048\000\000\000\000\000\000\000\049\000\
\115\000\000\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\048\000\137\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\048\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\020\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\022\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\023\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\041\000\
\000\000\041\000\000\000\041\000\041\000\041\000\000\000\041\000\
\000\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\030\000\000\000\030\000\000\000\030\000\030\000\030\000\000\000\
\030\000\000\000\030\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\031\000\000\000\031\000\000\000\031\000\031\000\031\000\
\000\000\031\000\000\000\031\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\032\000\000\000\032\000\000\000\032\000\032\000\
\032\000\000\000\032\000\000\000\032\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\028\000\000\000\028\000\000\000\028\000\
\028\000\028\000\000\000\028\000\000\000\028\000\000\000\028\000\
\028\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\029\000\000\000\029\000\000\000\
\029\000\029\000\029\000\000\000\029\000\000\000\029\000\000\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\048\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\036\000\000\000\
\036\000\000\000\036\000\036\000\036\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\037\000\
\000\000\037\000\000\000\037\000\037\000\037\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\038\000\000\000\038\000\000\000\038\000\038\000\038\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\033\000\000\000\033\000\000\000\033\000\033\000\033\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\000\000\000\000\
\033\000\033\000\034\000\000\000\034\000\000\000\034\000\034\000\
\034\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\034\000\034\000\049\000\000\000\000\000\
\000\000\034\000\034\000\000\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\048\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\000\000\000\000\059\000\060\000\061\000\
\062\000\048\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000"

let yycheck = "\005\000\
\000\000\007\000\008\000\009\000\042\000\004\000\004\001\004\000\
\002\001\002\001\004\001\000\000\006\001\007\001\008\001\008\001\
\010\001\002\001\012\001\002\001\014\001\015\001\007\001\006\001\
\066\000\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\000\002\001\041\000\034\001\043\000\044\000\007\001\
\006\001\007\001\048\000\049\000\050\000\042\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\001\001\103\000\104\000\009\001\
\070\000\011\001\001\001\109\000\074\000\111\000\005\001\002\001\
\001\001\001\001\007\001\006\001\001\001\008\001\013\001\002\001\
\005\001\004\001\004\001\006\001\007\001\008\001\008\001\010\001\
\013\001\131\000\128\000\016\001\017\001\018\001\136\000\137\000\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\110\000\007\001\009\001\001\001\114\000\003\001\004\001\005\001\
\118\000\112\000\011\001\112\000\011\001\002\001\001\001\008\001\
\003\001\006\001\005\001\008\001\130\000\004\001\004\001\002\001\
\110\000\008\001\008\001\128\000\114\000\027\001\028\001\029\001\
\010\001\006\001\032\001\033\001\034\001\035\001\036\001\037\001\
\027\001\028\001\029\001\008\001\003\001\032\001\033\001\034\001\
\035\001\036\001\037\001\001\001\002\001\003\001\034\001\005\001\
\001\001\011\001\003\001\011\001\005\001\007\001\001\001\034\001\
\003\001\034\001\005\001\002\001\010\001\010\001\002\001\007\001\
\004\001\030\001\006\001\007\001\008\001\027\001\010\001\006\001\
\001\001\000\000\027\001\031\001\034\001\035\001\036\001\037\001\
\027\001\034\001\035\001\036\001\037\001\025\001\026\001\034\001\
\035\001\036\001\037\001\001\001\002\001\002\001\004\001\005\001\
\006\001\007\001\008\001\006\001\010\001\007\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\002\001\002\001\
\004\001\005\001\006\001\007\001\008\001\010\001\010\001\007\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\010\001\
\002\001\001\001\006\001\003\001\004\001\005\001\081\000\128\000\
\139\000\048\000\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\027\001\028\001\
\029\001\026\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\001\001\002\001\255\255\255\255\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\002\001\255\255\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\002\001\255\255\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\002\001\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\255\255\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\002\001\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\255\255\012\001\255\255\014\001\
\015\001\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\002\001\255\255\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\255\255\012\001\255\255\
\014\001\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\019\001\020\001\005\001\255\255\255\255\
\255\255\025\001\026\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\001\001\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\001\001\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COMMA\000\
  ASSIGN\000\
  COLON\000\
  ARROW\000\
  CONCAT\000\
  ACCESS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  NUM_LIT\000\
  BOOLEAN_LIT\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 40 "parser.mly"
            ( List.rev _1 )
# 484 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                  ( [] )
# 490 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 44 "parser.mly"
                  ( _2 :: _1 )
# 498 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
                           ( List.rev _2 )
# 505 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assignment) in
    Obj.repr(
# 50 "parser.mly"
                    ( _1 )
# 512 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_call) in
    Obj.repr(
# 51 "parser.mly"
                    ( FuncCallStmt(fst _1, snd _1) )
# 519 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'assign_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'assign_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 53 "parser.mly"
      ( For(_3, _5, _7, _9) )
# 529 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 55 "parser.mly"
      ( While(_3, _5) )
# 537 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'body) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elifs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'else_opt) in
    Obj.repr(
# 57 "parser.mly"
      ( If({condition=_3;body=_5} :: _6, _7) )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                     ( Return(_2) )
# 554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                  ( None )
# 560 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
    Obj.repr(
# 62 "parser.mly"
                  ( match _1 with Assign(e1, e2) -> Some(e1, e2) | _ -> None )
# 567 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                       ( Assign(Id(_1), _3) )
# 575 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'access) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                       ( Assign(_1, _3) )
# 583 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                  ( None )
# 589 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                  ( Some(_1) )
# 596 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 73 "parser.mly"
                       ( NumLit(_1) )
# 603 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 74 "parser.mly"
                       ( BoolLit(_1) )
# 610 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                       ( StringLit(explode _1) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                       ( Id(_1) )
# 624 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_create) in
    Obj.repr(
# 77 "parser.mly"
                       ( _1 )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_call) in
    Obj.repr(
# 78 "parser.mly"
                       ( FuncCallExpr(fst _1, snd _1) )
# 638 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 79 "parser.mly"
                       ( _1 )
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_create) in
    Obj.repr(
# 80 "parser.mly"
                       ( _1 )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obj_create) in
    Obj.repr(
# 81 "parser.mly"
                       ( _1 )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                       ( _2 )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                       ( Binop(_1, Concat,  _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                       ( Binop(_1, Add,     _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                       ( Binop(_1, Sub,     _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                       ( Binop(_1, Mult,    _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                       ( Binop(_1, Div,     _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                       ( Binop(_1, Mod,     _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                       ( Binop(_1, Equal,   _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                       ( Binop(_1, Neq,     _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                       ( Binop(_1, Less,    _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                       ( Binop(_1, Leq,     _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                       ( Binop(_1, Greater, _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                       ( Binop(_1, Geq,     _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                       ( Binop(_1, And,     _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                       ( Binop(_1, Or,      _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                       ( Not(_2) )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                       ( [] )
# 791 "parser.ml"
               : 'elifs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'body) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'elifs) in
    Obj.repr(
# 101 "parser.mly"
                                       ( {condition=_3;body=_5} :: _6 )
# 800 "parser.ml"
               : 'elifs))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                  ( None )
# 806 "parser.ml"
               : 'else_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 105 "parser.mly"
                  ( Some(_2) )
# 813 "parser.ml"
               : 'else_opt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 118 "parser.mly"
                                          ( FuncCreate([], _4) )
# 820 "parser.ml"
               : 'func_create))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 119 "parser.mly"
                                          ( FuncCreate([_1], _3) )
# 828 "parser.ml"
               : 'func_create))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 120 "parser.mly"
                                          ( match _2 with
                                              Id(x) -> FuncCreate([x], _5) 
                                            | _ -> failwith "Invalid function creation."
                                          )
# 839 "parser.ml"
               : 'func_create))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mult_formals) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 124 "parser.mly"
                                          ( FuncCreate(_2, _5) )
# 847 "parser.ml"
               : 'func_create))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
                       ( List.rev (_3 :: _1) )
# 855 "parser.ml"
               : 'mult_formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                         ( [_1] )
# 862 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
                         ( _3 :: _1 )
# 870 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 134 "parser.mly"
                                 ( (_1, _3) )
# 878 "parser.ml"
               : 'func_call))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                  ( [] )
# 884 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 138 "parser.mly"
                  ( List.rev _1 )
# 891 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                            ( [_1] )
# 898 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                            ( _3 :: _1 )
# 906 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                             ( ObjectCreate([]) )
# 912 "parser.ml"
               : 'obj_create))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'properties) in
    Obj.repr(
# 150 "parser.mly"
                             ( ObjectCreate(List.rev _2) )
# 919 "parser.ml"
               : 'obj_create))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                                   ( [(_1, _3)] )
# 927 "parser.ml"
               : 'properties))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'properties) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                   ( (_3, _5) :: _1 )
# 936 "parser.ml"
               : 'properties))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 158 "parser.mly"
                                               ( ListCreate(_2) )
# 943 "parser.ml"
               : 'list_create))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 159 "parser.mly"
                                               ( Sublist(_1, _3, _5) )
# 952 "parser.ml"
               : 'list_create))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                                               ( Access(_1, _3) )
# 960 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
                                               ( Access(_1, Id(_3)) )
# 968 "parser.ml"
               : 'access))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
